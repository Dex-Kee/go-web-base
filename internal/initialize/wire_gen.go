// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package initialize

import (
	"context"
	"github.com/LyricTian/gin-admin/v9/internal/module/rbac"
	"github.com/LyricTian/gin-admin/v9/internal/module/rbac/api"
	"github.com/LyricTian/gin-admin/v9/internal/module/rbac/dao"
	"github.com/LyricTian/gin-admin/v9/internal/module/rbac/service"
	"github.com/LyricTian/gin-admin/v9/internal/x/utilx"
)

import (
	_ "github.com/LyricTian/gin-admin/v9/internal/swagger"
	_ "net/http/pprof"
)

// Injectors from wire.go:

func BuildInjector(ctx context.Context) (*Injector, func(), error) {
	auther, cleanup, err := InitAuth(ctx)
	if err != nil {
		return nil, nil, err
	}
	cacher, cleanup2, err := InitCache(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	db, cleanup3, err := InitDB(ctx)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	roleRepo := &dao.RoleRepo{
		DB: db,
	}
	menuActionResourceRepo := &dao.MenuActionResourceRepo{
		DB: db,
	}
	casbinx := &rbac.Casbinx{
		Cache:                  cacher,
		RoleRepo:               roleRepo,
		MenuActionResourceRepo: menuActionResourceRepo,
	}
	transRepo := utilx.TransRepo{
		DB: db,
	}
	menuRepo := dao.MenuRepo{
		DB: db,
	}
	menuActionRepo := dao.MenuActionRepo{
		DB: db,
	}
	daoMenuActionResourceRepo := dao.MenuActionResourceRepo{
		DB: db,
	}
	menuSvc := &service.MenuSvc{
		TransRepo:              transRepo,
		MenuRepo:               menuRepo,
		MenuActionRepo:         menuActionRepo,
		MenuActionResourceRepo: daoMenuActionResourceRepo,
	}
	menuAPI := &api.MenuAPI{
		MenuSvc: menuSvc,
	}
	daoRoleRepo := dao.RoleRepo{
		DB: db,
	}
	roleMenuRepo := dao.RoleMenuRepo{
		DB: db,
	}
	userRoleRepo := dao.UserRoleRepo{
		DB: db,
	}
	roleSvc := &service.RoleSvc{
		TransRepo:    transRepo,
		RoleRepo:     daoRoleRepo,
		RoleMenuRepo: roleMenuRepo,
		UserRoleRepo: userRoleRepo,
		Cache:        cacher,
	}
	roleAPI := &api.RoleAPI{
		RoleSvc: roleSvc,
	}
	userRepo := dao.UserRepo{
		DB: db,
	}
	userSvc := &service.UserSvc{
		TransRepo:    transRepo,
		UserRepo:     userRepo,
		UserRoleRepo: userRoleRepo,
		RoleRepo:     daoRoleRepo,
		Cache:        cacher,
	}
	userAPI := &api.UserAPI{
		UserSvc: userSvc,
	}
	daoUserRepo := &dao.UserRepo{
		DB: db,
	}
	daoUserRoleRepo := &dao.UserRoleRepo{
		DB: db,
	}
	daoMenuRepo := &dao.MenuRepo{
		DB: db,
	}
	daoMenuActionRepo := &dao.MenuActionRepo{
		DB: db,
	}
	loginSvc := &service.LoginSvc{
		Auth:           auther,
		Cache:          cacher,
		UserRepo:       daoUserRepo,
		UserRoleRepo:   daoUserRoleRepo,
		RoleRepo:       roleRepo,
		MenuRepo:       daoMenuRepo,
		MenuActionRepo: daoMenuActionRepo,
	}
	loginAPI := &api.LoginAPI{
		LoginSvc: loginSvc,
	}
	rbacRBAC := &rbac.RBAC{
		DB:       db,
		Casbinx:  casbinx,
		MenuAPI:  menuAPI,
		RoleAPI:  roleAPI,
		UserAPI:  userAPI,
		LoginAPI: loginAPI,
		MenuSvc:  menuSvc,
		UserSvc:  userSvc,
	}
	injector := &Injector{
		Auth:  auther,
		Cache: cacher,
		DB:    db,
		RBAC:  rbacRBAC,
	}
	return injector, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
