// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wirex

import (
	"context"
	"github.com/LyricTian/gin-admin/v10/internal/mods"
	"github.com/LyricTian/gin-admin/v10/internal/mods/rbac"
	"github.com/LyricTian/gin-admin/v10/internal/mods/rbac/api"
	"github.com/LyricTian/gin-admin/v10/internal/mods/rbac/biz"
	"github.com/LyricTian/gin-admin/v10/internal/mods/rbac/dal"
	"github.com/LyricTian/gin-admin/v10/internal/utils"
)

// Injectors from wire.go:

func BuildInjector(ctx context.Context) (*Injector, func(), error) {
	cacher, cleanup, err := InitCacher(ctx)
	if err != nil {
		return nil, nil, err
	}
	db, cleanup2, err := InitDB(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	trans := &utils.Trans{
		DB: db,
	}
	menu := &dal.Menu{
		DB: db,
	}
	menuResource := &dal.MenuResource{
		DB: db,
	}
	roleMenu := &dal.RoleMenu{
		DB: db,
	}
	bizMenu := &biz.Menu{
		Trans:           trans,
		MenuDAL:         menu,
		MenuResourceDAL: menuResource,
		RoleMenuDAL:     roleMenu,
	}
	apiMenu := &api.Menu{
		MenuBIZ: bizMenu,
	}
	role := &dal.Role{
		DB: db,
	}
	userRole := &dal.UserRole{
		DB: db,
	}
	bizRole := &biz.Role{
		Trans:       trans,
		RoleDAL:     role,
		RoleMenuDAL: roleMenu,
		UserRoleDAL: userRole,
	}
	apiRole := &api.Role{
		RoleBIZ: bizRole,
	}
	user := &dal.User{
		DB: db,
	}
	bizUser := &biz.User{
		Trans:       trans,
		UserDAL:     user,
		UserRoleDAL: userRole,
		RoleDAL:     role,
	}
	apiUser := &api.User{
		UserBIZ: bizUser,
	}
	rbacRBAC := &rbac.RBAC{
		DB:      db,
		MenuAPI: apiMenu,
		RoleAPI: apiRole,
		UserAPI: apiUser,
	}
	modsMods := &mods.Mods{
		RBAC: rbacRBAC,
	}
	injector := &Injector{
		Cache: cacher,
		DB:    db,
		M:     modsMods,
	}
	return injector, func() {
		cleanup2()
		cleanup()
	}, nil
}
