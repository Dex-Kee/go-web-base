definitions:
  errors.Error:
    properties:
      code:
        type: integer
      detail:
        type: string
      id:
        type: string
      status:
        type: string
    type: object
  typed.Captcha:
    properties:
      captcha_id:
        type: string
    type: object
  typed.Dictionary:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      key:
        description: Key of the dictionary
        type: string
      ns:
        description: Namespace of the dictionary
        type: string
      remark:
        description: Remark of the key
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
      value:
        description: Value of the key
        type: string
    type: object
  typed.DictionaryCreate:
    properties:
      key:
        type: string
      ns:
        type: string
      remark:
        type: string
      value:
        type: string
    required:
    - key
    - ns
    type: object
  typed.LoginPasswordUpdate:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  typed.LoginToken:
    properties:
      access_token:
        description: jwt token
        type: string
      expires_at:
        description: unix timestamp
        type: integer
      token_type:
        description: 'Usage: (Authorization=token_type token)'
        type: string
    required:
    - access_token
    - expires_at
    - token_type
    type: object
  typed.Menu:
    properties:
      actions:
        items:
          $ref: '#/definitions/typed.MenuAction'
        type: array
      children:
        items:
          $ref: '#/definitions/typed.Menu'
        type: array
      created_at:
        type: string
      created_by:
        type: string
      hide:
        type: boolean
      icon:
        type: string
      id:
        type: string
      link:
        type: string
      name:
        type: string
      parent_id:
        type: string
      parent_path:
        description: parent path (split by '.')
        type: string
      remark:
        type: string
      sequence:
        type: integer
      status:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  typed.MenuAction:
    properties:
      code:
        description: Code of the action (for example, add, edit, delete, etc.)
        type: string
      created_at:
        type: string
      id:
        type: string
      menu_id:
        type: string
      name:
        description: Name of the action (for example, Add, Edit, Delete, etc.)
        type: string
      resources:
        items:
          $ref: '#/definitions/typed.MenuActionResource'
        type: array
      updated_at:
        type: string
    type: object
  typed.MenuActionResource:
    properties:
      action_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      menu_id:
        type: string
      method:
        description: HTTP Method (GET, POST, PUT, DELETE)
        type: string
      path:
        description: Path of the resource (:id means the parameter is required)
        type: string
      updated_at:
        type: string
    type: object
  typed.MenuCreate:
    properties:
      actions:
        items:
          $ref: '#/definitions/typed.MenuAction'
        type: array
      hide:
        type: boolean
      icon:
        type: string
      link:
        type: string
      name:
        type: string
      parent_id:
        type: string
      remark:
        type: string
      sequence:
        type: integer
    required:
    - name
    - sequence
    type: object
  typed.MenuUpdateStatus:
    properties:
      status:
        description: enabled/disabled
        type: string
    required:
    - status
    type: object
  typed.Role:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      name:
        type: string
      remark:
        type: string
      role_menus:
        items:
          $ref: '#/definitions/typed.RoleMenu'
        type: array
      sequence:
        type: integer
      status:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  typed.RoleCreate:
    properties:
      menus:
        items:
          $ref: '#/definitions/typed.RoleMenu'
        type: array
      name:
        type: string
      remark:
        type: string
      sequence:
        type: integer
    required:
    - name
    - sequence
    type: object
  typed.RoleMenu:
    properties:
      created_at:
        type: string
      id:
        type: string
      menu_action_id:
        type: string
      menu_id:
        type: string
      role_id:
        type: string
    type: object
  typed.RoleUpdateStatus:
    properties:
      status:
        description: enabled/disabled
        type: string
    required:
    - status
    type: object
  typed.User:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        description: Name of the user
        type: string
      phone:
        type: string
      remark:
        type: string
      status:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
      user_roles:
        items:
          $ref: '#/definitions/typed.UserRole'
        type: array
      username:
        description: Login username (must be unique)
        type: string
    type: object
  typed.UserCreate:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      remark:
        type: string
      role_ids:
        items:
          type: string
        type: array
      username:
        type: string
    required:
    - name
    - username
    type: object
  typed.UserLogin:
    properties:
      captcha_code:
        description: captcha verify code
        type: string
      captcha_id:
        description: captcha verify id
        type: string
      login_name:
        description: login username
        type: string
      password:
        description: login password (md5)
        type: string
    required:
    - captcha_code
    - captcha_id
    - login_name
    - password
    type: object
  typed.UserRole:
    properties:
      created_at:
        type: string
      id:
        type: string
      role:
        $ref: '#/definitions/typed.Role'
      role_id:
        type: string
      user_id:
        type: string
    type: object
  typed.UserUpdateStatus:
    properties:
      status:
        description: activated/freezed
        type: string
    required:
    - status
    type: object
  utilx.PaginationResult:
    properties:
      current:
        type: integer
      pageSize:
        type: integer
      total:
        type: integer
    type: object
  utilx.ResponseResult:
    properties:
      data: {}
      error:
        $ref: '#/definitions/errors.Error'
      pagination:
        $ref: '#/definitions/utilx.PaginationResult'
      success:
        type: boolean
    type: object
info:
  contact: {}
  description: A simple, modular, high-performance RBAC development framework built
    on golang.
  title: ginadmin
  version: 9.0.0
paths:
  /api/rbac/v1/current/logout:
    post:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Logout system
      tags:
      - LoginAPI
  /api/rbac/v1/current/menus:
    put:
      responses:
        "200":
          description: query result
          schema:
            allOf:
            - $ref: '#/definitions/utilx.ResponseResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/typed.Menu'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Query current user privilege menu trees
      tags:
      - LoginAPI
  /api/rbac/v1/current/password:
    put:
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/typed.LoginPasswordUpdate'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Update current user login password
      tags:
      - LoginAPI
  /api/rbac/v1/current/refreshtoken:
    post:
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utilx.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/typed.LoginToken'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Refresh current login token
      tags:
      - LoginAPI
  /api/rbac/v1/current/user:
    get:
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utilx.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/typed.User'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Get current user
      tags:
      - LoginAPI
  /api/rbac/v1/login:
    post:
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/typed.UserLogin'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utilx.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/typed.LoginToken'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      summary: Login system by username and password
      tags:
      - LoginAPI
  /api/rbac/v1/login/captcha:
    get:
      parameters:
      - description: CaptchaID
        in: query
        name: id
        required: true
        type: string
      - description: Reload captcha image (reload=1)
        in: query
        name: reload
        type: string
      produces:
      - image/png
      responses:
        "200":
          description: Captcha image
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      summary: Write captcha image
      tags:
      - LoginAPI
  /api/rbac/v1/login/captchaid:
    get:
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utilx.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/typed.Captcha'
              type: object
      summary: Get captcha id
      tags:
      - LoginAPI
  /api/rbac/v1/menus:
    get:
      parameters:
      - description: parent id
        in: query
        name: parentID
        type: integer
      - description: menu name (fuzzy query)
        in: query
        name: name
        type: string
      - description: menu status (enabled/disabled)
        in: query
        name: status
        type: string
      responses:
        "200":
          description: query result
          schema:
            allOf:
            - $ref: '#/definitions/utilx.ResponseResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/typed.Menu'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Query menu tree
      tags:
      - MenuAPI
    post:
      parameters:
      - description: request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/typed.MenuCreate'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utilx.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/typed.Menu'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Create menu
      tags:
      - MenuAPI
  /api/rbac/v1/menus/{id}:
    delete:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Delete menu by id
      tags:
      - MenuAPI
    get:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utilx.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/typed.Menu'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Get single menu by id
      tags:
      - MenuAPI
    put:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: integer
      - description: request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/typed.MenuCreate'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Update menu by id
      tags:
      - MenuAPI
  /api/rbac/v1/menus/{id}/status:
    put:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: integer
      - description: request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/typed.MenuUpdateStatus'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Update menu status by id
      tags:
      - MenuAPI
  /api/rbac/v1/roles:
    get:
      parameters:
      - default: 1
        description: pagination index
        in: query
        name: current
        required: true
        type: integer
      - default: 10
        description: pagination size
        in: query
        name: pageSize
        required: true
        type: integer
      - description: role name (fuzzy query)
        in: query
        name: name
        type: string
      - description: role status (enabled/disabled)
        in: query
        name: status
        type: string
      - description: ' result type (select/paginate, default: paginate)'
        in: query
        name: result
        type: string
      responses:
        "200":
          description: query result
          schema:
            allOf:
            - $ref: '#/definitions/utilx.ResponseResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/typed.Role'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Query role list
      tags:
      - RoleAPI
    post:
      parameters:
      - description: request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/typed.RoleCreate'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utilx.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/typed.Role'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Create role
      tags:
      - RoleAPI
  /api/rbac/v1/roles/{id}:
    delete:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Delete role by id
      tags:
      - RoleAPI
    get:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utilx.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/typed.Role'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Get single role by id
      tags:
      - RoleAPI
    put:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: integer
      - description: request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/typed.RoleCreate'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Update role by id
      tags:
      - RoleAPI
  /api/rbac/v1/roles/{id}/status:
    put:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: integer
      - description: request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/typed.RoleUpdateStatus'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Update role status by id
      tags:
      - RoleAPI
  /api/rbac/v1/users:
    get:
      parameters:
      - default: 1
        description: pagination index
        in: query
        name: current
        required: true
        type: integer
      - default: 10
        description: pagination size
        in: query
        name: pageSize
        required: true
        type: integer
      - description: user status (enabled/disabled)
        in: query
        name: status
        type: string
      - description: name (fuzzy query)
        in: query
        name: name
        type: string
      - description: username (fuzzy query)
        in: query
        name: username
        type: string
      - description: role id
        in: query
        name: roleID
        type: string
      responses:
        "200":
          description: query result
          schema:
            allOf:
            - $ref: '#/definitions/utilx.ResponseResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/typed.User'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Query user list
      tags:
      - UserAPI
    post:
      parameters:
      - description: request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/typed.UserCreate'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utilx.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/typed.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Create user
      tags:
      - UserAPI
  /api/rbac/v1/users/{id}:
    delete:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Delete user by id
      tags:
      - UserAPI
    get:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utilx.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/typed.User'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Get single user by id
      tags:
      - UserAPI
    put:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: integer
      - description: request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/typed.UserCreate'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Update user by id
      tags:
      - UserAPI
  /api/rbac/v1/users/{id}/status:
    put:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      - description: request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/typed.UserUpdateStatus'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Update user status by id
      tags:
      - UserAPI
  /api/sys/v1/dictionaries:
    get:
      parameters:
      - default: 1
        description: pagination index
        in: query
        name: current
        required: true
        type: integer
      - default: 10
        description: pagination size
        in: query
        name: pageSize
        required: true
        type: integer
      - description: query namespace
        in: query
        name: ns
        type: string
      - description: query key
        in: query
        name: key
        type: string
      responses:
        "200":
          description: query result
          schema:
            allOf:
            - $ref: '#/definitions/utilx.ResponseResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/typed.Dictionary'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Query dictionary list
      tags:
      - DictionaryAPI
    post:
      parameters:
      - description: request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/typed.DictionaryCreate'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utilx.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/typed.Dictionary'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Create dictionary
      tags:
      - DictionaryAPI
  /api/sys/v1/dictionaries/{id}:
    delete:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Delete single dictionary by id
      tags:
      - DictionaryAPI
    get:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utilx.ResponseResult'
            - properties:
                data:
                  $ref: '#/definitions/typed.Dictionary'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Get single dictionary by id
      tags:
      - DictionaryAPI
    put:
      parameters:
      - description: unique id
        in: path
        name: id
        required: true
        type: integer
      - description: request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/typed.DictionaryCreate'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utilx.ResponseResult'
      security:
      - ApiKeyAuth: []
      summary: Update dictionary by id
      tags:
      - DictionaryAPI
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
